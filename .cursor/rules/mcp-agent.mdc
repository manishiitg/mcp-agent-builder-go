---
alwaysApply: true
---



# üöÄ Go LangChain MCP Agent - Architecture & Testing Guide

## üìã **Production Status** ‚úÖ
- **Multi-Server MCP**: 12 servers, 112 tools, all protocols (SSE/HTTP/stdio)
- **Connection Management**: Simplified direct connections with automatic protocol detection
- **Langfuse Tracing**: Complete observability with event architecture
- **Testing Framework**: Autonomous testing with comprehensive validation
- **Event Streaming**: Complete event emission for all agent activities
- **Agent Modes**: Simple and ReAct agents with different conversation end detection
- **External SSE Server Support**: Fixed session management for external SSE servers
- **Virtual Tools**: On-demand prompt and resource access with system prompt previews

## üèóÔ∏è **Core Architecture**

### **Key Components**
- **Multi-Server Support**: Aggregates tools from multiple MCP servers
- **Multi-Provider LLM**: AWS Bedrock (Claude), OpenAI (GPT-4o/4/3.5)
- **Connection Management**: Simplified direct connections with automatic protocol detection
- **Smart Protocol Detection**: Auto-detects SSE/HTTP/stdio from URLs
- **True Streaming**: Real-time LLM streaming (OpenAI full, Bedrock partial)
- **Agent Modes**: Simple and ReAct agents with different reasoning patterns
- **External SSE Session Management**: Proper session handling for external SSE servers
- **Virtual Tools**: On-demand access to prompts and resources with cached data

### **Virtual Tools Architecture** ‚úÖ **NEW**
**Purpose**: Replace direct prompt/resource injection with on-demand access via virtual tools.

**Implementation**:
- **System Prompt Previews**: Shows prompt name + first 10 lines with "... (use 'get_prompt' tool for full content)"
- **Virtual Tools**: `get_prompt` and `get_resource` for on-demand access
- **Cached Data**: Uses locally cached prompts/resources (fast, no network calls)
- **Fallback**: Only makes MCP server calls if data not in cache
- **Dynamic Date Injection**: Current date and time automatically injected into system prompts

**Benefits**:
- **Cleaner System Prompt**: No massive content injection
- **Better Performance**: Uses cached data (fast access)
- **Scalable**: Can handle hundreds of prompts efficiently
- **On-Demand Access**: LLM fetches specific content when needed

**Virtual Tools**:
```go
// Prompt Tools
- 'get_prompt': Fetch full content by server + name

// Resource Tools  
- 'get_resource': Fetch content by server + URI
```

**System Prompt Structure**:
```
üìö AVAILABLE PROMPTS AND KNOWLEDGE RESOURCES:
- aws-msk: # Amazon MSK Debugging Guide
  This guide captures a repeatable **command-line workflow**...
  ... (use 'get_prompt' tool for full content)

üìÅ AVAILABLE RESOURCES:
- config.json (file://config.json): Application configuration
- logs.txt (file://logs.txt): System log files

üîß VIRTUAL TOOLS FOR KNOWLEDGE ACCESS:
- 'get_prompt': Fetch full content of specific prompt
- 'get_resource': Fetch content of specific resource
```

**MCP Protocol Guidance**:
- **Prompts**: Static documentation, guides, best practices, procedures
- **Resources**: Current data, config files, logs, dynamic content

### **Dynamic Date Injection** ‚úÖ **NEW**
**Purpose**: Automatically inject current date and time into system prompts for better context awareness.

**Implementation**:
- **Date Placeholders**: `{{CURRENT_DATE}}` and `{{CURRENT_TIME}}` in prompt templates
- **Automatic Replacement**: Builder automatically replaces placeholders with current values
- **Format**: Date as YYYY-MM-DD, Time as HH:MM:SS (24-hour format)
- **Both Agent Types**: Works with both Simple and ReAct agent prompts

**Date Section Structure**:
```
## üìÖ **CURRENT SESSION INFORMATION**
**Date**: 2025-01-27
**Time**: 14:30:25
```

**Benefits**:
- **Context Awareness**: Agents know when they're running
- **Session Tracking**: Easy to identify when conversations occurred
- **Debugging**: Helps with troubleshooting and log analysis
- **User Experience**: Users see current date/time in agent responses

**Files Modified**:
- `agent_go/pkg/mcpagent/prompt/prompt.go` - Added date placeholders to SystemPromptTemplate
- `agent_go/pkg/mcpagent/prompt/react_prompt.go` - Added date placeholders to ReActSystemPromptTemplate
- `agent_go/pkg/mcpagent/prompt/builder.go` - Added date replacement logic in BuildSystemPromptWithoutTools

**Testing Results**:
- ‚úÖ **Date placeholders added** to both prompt templates
- ‚úÖ **Builder function updated** with date replacement logic
- ‚úÖ **All tests passing** (3/3 tests passed)
- ‚úÖ **Compilation successful** with no errors

**Files Modified**:
- `agent_go/pkg/mcpagent/virtual_tools.go` - Virtual tool definitions and handlers
- `agent_go/pkg/mcpagent/prompt/prompt.go` - System prompt templates with previews and date placeholders
- `agent_go/pkg/mcpagent/prompt/builder.go` - Preview extraction logic and dynamic date replacement
- `agent_go/pkg/mcpagent/conversation.go` - Virtual tool call handling
- `agent_go/cmd/testing/aws-tools-test.go` - Integrated testing

**Testing Results**:
- ‚úÖ **All MCP servers connected** (13/13)
- ‚úÖ **15 prompts discovered** with previews
- ‚úÖ **Virtual tools working** (get_prompt, get_resource)
- ‚úÖ **System prompt optimized** with previews and guidance
- ‚úÖ **No redundant tools** (removed list_prompts, list_resources)
- ‚úÖ **Dynamic date injection working** in both simple and ReAct prompts

### **Agent Modes and Conversation End Detection**

#### **Simple Agent**
- **Mode**: `simple` - Direct tool usage without explicit reasoning
- **Conversation End**: Ends immediately when no tool calls are detected
- **Max Turns**: 10 (fewer turns for direct responses)
- **Event**: Emits `conversation_end` when no tools are called

#### **ReAct Agent**
- **Mode**: `react` - Explicit reasoning with step-by-step thinking
- **Conversation End**: Ends when "Final Answer:" pattern is detected
- **Max Turns**: 20 (more turns for reasoning process)
- **Event**: Emits `conversation_end` when completion pattern is found
- **Completion Patterns**: "Final Answer:", "FINAL ANSWER:", "Final answer:", etc.

### **Connection Management System** ‚úÖ **SIMPLIFIED**
**Direct Connection Approach:**
- **Simple Connections**: Direct client connections without pooling complexity
- **Protocol Support**: HTTP, SSE, and stdio with automatic detection
- **Consistent with mcp-go**: Same patterns across libraries
- **Easy Testing**: Direct connections are easier to test and debug

### **Key Files**
- `agent_go/pkg/mcpclient/client.go` - Direct client implementation
- `agent_go/pkg/mcpclient/sse_manager.go` - Direct SSE connections
- `agent_go/pkg/mcpclient/http_manager.go` - Direct HTTP connections
- `agent_go/pkg/mcpclient/stdio_manager.go` - Direct stdio connections
- `agent_go/pkg/mcpagent/connection.go` - Agent integration
- `agent_go/pkg/mcpclient/config.go` - Smart protocol detection
- `agent_go/pkg/mcpagent/conversation.go` - Conversation logic and end detection
- `agent_go/pkg/mcpagent/prompt/react_prompt.go` - ReAct completion patterns

## üîß **Recent Bug Fixes & Improvements**

### **External SSE Server Session Management** ‚úÖ **RESOLVED**
**Issue**: External SSE servers were failing with "Invalid session ID" errors during tool listing.

**Root Cause**: External SSE servers use different session management patterns than internal servers:
- **External servers**: Return `event: endpoint` with session ID, but sessions become invalid during tool listing
- **Internal servers**: Return `event: connected` with status + heartbeats, maintaining valid sessions

**Solution Applied**:
1. **Enhanced Session Management**: Improved session lifecycle handling for external SSE servers
2. **Context Isolation**: Used isolated background contexts for SSE tool listing to prevent cancellation
3. **Connection Pool Improvements**: Enhanced pooled client management for external server protocols
4. **Debug Logging**: Added comprehensive logging for session creation, reuse, and health checks

**Testing Results**:
- ‚úÖ **All External Servers Working**: AWS, GitHub, DB, K8s, Grafana, Sentry, Slack, Profiler, Scripts
- ‚úÖ **Health Checks Passing**: All servers showing healthy status
- ‚úÖ **Tool Discovery Successful**: All servers returning their tools correctly
- ‚úÖ **No Session Errors**: Eliminated "Invalid session ID" and "SSE stream error: context canceled"

### **Server Infrastructure Improvements** ‚úÖ **RESOLVED**
**Issue**: Server startup panics and API endpoint failures.

**Root Cause**: Multiple issues including logger nil pointer dereference and Go build cache problems.

**Solution Applied**:
1. **Centralized Logger Integration**: Modified all files to use `utils.GetLogger()` instead of `logrus.New()`
2. **MCP Go Library API Adaptation**: Adapted to breaking changes in `github.com/mark3labs/mcp-go` v0.35.0
3. **Server Management Improvements**: Enhanced `run_server_with_logging.sh` with background mode support

**Testing Results**:
- ‚úÖ **No Startup Panics**: Server infrastructure is now stable
- ‚úÖ **API Endpoints Working**: `http://localhost:8000/api/query` responding correctly
- ‚úÖ **Background Mode**: Server running with proper PID management
- ‚úÖ **Centralized Logging**: Proper logger integration across all components

### **SSE Connection Cancellation Fixes** ‚úÖ **RESOLVED**
**Issue**: SSE connections were being established but then canceled during tool listing.

**Solution Applied**:
1. **Context Isolation**: Modified `DiscoverAllToolsParallel` to use isolated background context for SSE connections
2. **Enhanced PooledClient**: Updated `PooledClient.Connect` and `PooledClient.ListTools` for SSE context isolation
3. **Debug Logging**: Added comprehensive logging to track context isolation and session management
4. **Session Lifecycle Management**: Improved session creation, reuse, and cleanup for external servers

**Testing Results**:
- ‚úÖ **External SSE Servers**: All working with proper session management
- ‚úÖ **Tool Discovery**: All servers successfully listing their tools
- ‚úÖ **Health Monitoring**: All servers showing healthy status
- ‚úÖ **No Connection Cancellation**: Eliminated SSE stream cancellation issues

### **Fallback LLM Streaming Logging Fix** ‚úÖ **RESOLVED**
**Issue**: Log files showed streaming-like behavior with fragmented debug messages even though no actual streaming was happening in the main code.

**Root Cause**: The fallback LLM generation for ReAct agents was using streaming (`llmtypes.WithStreamingFunc`) during fallback scenarios, causing each chunk to be logged individually via the `sendMessage` callback.

**Solution Applied**:
1. **Removed Streaming from Fallback**: Eliminated `llmtypes.WithStreamingFunc` usage in all fallback scenarios
2. **Consistent Non-Streaming**: All agents now use non-streaming `GenerateContent` during fallback
3. **Updated Comments**: Replaced outdated "For ReAct agents, use streaming in fallback" comments
4. **Maintained Functionality**: Fallback logic still works, just without streaming overhead

**Files Modified**:
- `agent_go/pkg/mcpagent/conversation.go` - Removed streaming from fallback LLM generation
- Updated all fallback scenarios: max token errors, throttling errors, cross-provider fallbacks

**Testing Results**:
- ‚úÖ **No More Fragmented Logs**: Debug messages now appear as complete sentences
- ‚úÖ **Consistent Behavior**: All agents use non-streaming approach consistently
- ‚úÖ **Fallback Still Works**: Model fallback functionality preserved without streaming
- ‚úÖ **Cleaner Logs**: Eliminated streaming-like appearance in log files

## üß™ **Testing Framework**

### **External SSE Server Testing** ‚úÖ **NEW**
```bash
# Test external SSE servers vs internal fileserver
./test_external_sse.sh
```

**Test Results**:
- ‚úÖ **External SSE Servers**: All working (AWS, GitHub, DB, K8s, Grafana, Sentry, Slack, Profiler, Scripts)
- ‚úÖ **Tool Discovery**: All servers returning tools successfully
- ‚úÖ **Health Checks**: All servers showing healthy status
- ‚úÖ **No Session Errors**: Eliminated "Invalid session ID" errors

### **Complex AWS Cost Analysis Test**
```bash
# Test with complex AWS cost analysis query
./test_single_observer.sh
./test_polling_api.sh
```

**Complex Query**: "Analyze costs across all AWS services and provide detailed breakdown. Get cost data for EC2, RDS, S3, Lambda, and other major services. Also check for any unusual spending patterns, identify cost optimization opportunities, and provide recommendations for reducing AWS costs. Include historical data for the last 3 months and forecast for the next month. Generate a comprehensive report with charts and detailed analysis."

**Test Features**:
- **Multiple Tool Calls**: Triggers multiple AWS tool calls for comprehensive analysis
- **Large Tool Outputs**: Tests handling of large tool responses
- **Fallback Scenarios**: May trigger model fallback due to complexity
- **Event Validation**: Verifies all event types are properly emitted
- **Agent Mode Comparison**: Tests both Simple and ReAct agents

### **Lightweight MCP Server Test**
```bash
# Test all servers with automatic protocol detection
../bin/orchestrator test aws-test --config configs/mcp_server_actual.json
```

**Features:**
- **Automatic Protocol Detection**: SSE from `/sse` URLs, HTTP from `http://` URLs
- **Comprehensive Testing**: Tools, resources, prompts, server info
- **Smart Connection Management**: Pooled clients with health monitoring
- **Detailed Reporting**: Success/failure counts with tool descriptions

### **Comprehensive AWS Test**
```bash
# AWS cost report test with actual MCP servers
../bin/orchestrator test agent --comprehensive-aws --provider bedrock --log-file logs/aws_test.log
```

**Test Results:**
- **Status**: ‚úÖ **PASSED** - AWS Bedrock with 4 AWS tools
- **Duration**: ~12 seconds for AWS operations
- **Tools**: aws_cli_query, aws_cloudwatch, aws_cloudwatch_filter_log_events, aws_cloudwatch_multi_metrics
- **Langfuse Tracing**: Complete trace with span hierarchy

### **Comprehensive SSE Test**
```bash
# SSE streaming test with all functionality
../bin/orchestrator test sse --comprehensive --log-file logs/sse_comprehensive_test.log
```

**Test Results:**
- **Status**: ‚úÖ **PASSED** - 7/7 tests passed (100% success rate)
- **Tests**: Basic connection, streaming, connection management, event validation, multi-client, performance, error handling
- **Features**: Real-time streaming, multi-client support, error recovery, performance validation
- **Langfuse Integration**: Automatic tracing with debug mode enabled

### **Autonomous Testing Commands**
```bash
# Basic tests
../bin/orchestrator test agent --simple --provider bedrock --log-file logs/simple.log
../bin/orchestrator test agent --streaming --provider bedrock --log-file logs/streaming.log
../bin/orchestrator test agent --complex --provider bedrock --log-file logs/complex.log

# Connection pooling test
../bin/orchestrator test connection-pool --log-file logs/pool.log

# Langfuse trace retrieval
../bin/orchestrator test langfuse get --log-file logs/traces.log

# SSE comprehensive test
../bin/orchestrator test sse --comprehensive --log-file logs/sse_comprehensive_test.log

# External SSE server test
./test_external_sse.sh
```

## üìä **Event Architecture**

### **Complete Event Types**
- **System Events**: `system_prompt`, `user_message`
- **LLM Events**: `llm_generation_start`, `llm_generation_end`, `token_usage`, `llm_messages`
- **Tool Events**: `tool_call_start`, `tool_call_end`, `tool_call_error` (consolidated)
- **Error Events**: `tool_call_error`, `llm_error`, `throttling_detected`
- **Fallback Events**: `fallback_model_used`, `token_limit_exceeded`
- **Completion Events**: `conversation_end`, `agent_end`

### **Event Architecture Clarifications**

#### **Tool Events Consolidation** ‚úÖ **FIXED**
- **Before**: Redundant `tool_call_end`, `tool_output`, and `tool_response` events
- **After**: Single `tool_call_end` event containing all tool information
- **Benefits**: Reduced event noise, cleaner frontend handling, better performance

#### **LLM Messages Event Purpose** ‚úÖ **CLARIFIED**
- **Purpose**: Shows exactly what messages are sent to the LLM
- **Content**: Conversation context, system prompts, user messages, assistant responses
- **Excludes**: Tool input/output (captured in separate tool events)
- **Design**: Intentional separation for better observability and debugging

#### **Frontend Polling Completion Detection** ‚úÖ **FIXED**
- **Detection**: Monitors for `conversation_end`, `agent_end`, `conversation_error`, `agent_error`
- **Action**: Automatically stops polling when completion detected
- **Benefits**: Prevents unnecessary API calls, improves performance, better UX

### **Agent Mode Event Differences**
- **Simple Agent**: Emits `conversation_end` when no tool calls detected
- **ReAct Agent**: Emits `conversation_end` when "Final Answer:" pattern found
- **Both Modes**: Emit all other events consistently (tool calls, LLM generation, etc.)

### **Large Tool Output Handling**
- **Automatic Detection**: Tool outputs over 1000 characters are saved to files
- **File Processing**: Use fileserver tools to read and analyze large outputs
- **Event Emission**: `large_tool_output_detected` events for oversized responses
- **Integration**: ReAct prompt includes guidance for handling large outputs

## üìä **Langfuse Tracing Integration**

### **Event Architecture**
- **Typed Events**: Proper span hierarchy with structured data
- **Complete Capture**: System prompts, user messages, tool calls, results
- **Token Metrics**: Input/output/total tokens with cost estimates
- **Dashboard Access**: Real-time trace viewing at https://us.cloud.langfuse.com

### **Environment Variables**
```bash
TRACING_PROVIDER=langfuse
LANGFUSE_PUBLIC_KEY=your_public_key
LANGFUSE_SECRET_KEY=your_secret_key
LANGFUSE_DEBUG=true
```

## üîß **Recent Architecture Changes**

### **Connection Management Simplification** ‚úÖ **COMPLETED**
**What Was Accomplished:**
- **‚úÖ COMPLETE**: Removed complex connection pooling system
- **‚úÖ COMPLETE**: Simplified SSE, HTTP, and stdio managers to use direct connections
- **‚úÖ COMPLETE**: Updated all test agents to use the new config file
- **‚úÖ COMPLETE**: Added k8s and profiler tools to disallowed tools lists
- **‚úÖ COMPLETE**: Task creation - SubTask objects created with proper metadata and iteration context
- **‚úÖ COMPLETE**: Connection management simplified to match mcp-go library approach

**Files Simplified/Removed:**
- ‚ùå **Removed**: `pool.go` - Connection pooling logic
- ‚ùå **Removed**: `pool_test.go` - Pooling tests  
- ‚ùå **Removed**: `pooled_client.go` - Pooled client wrapper
- ‚ùå **Removed**: `connection_pool_tools.go` - Pooling tools
- ‚ùå **Removed**: `session.go` - Complex session management
- ‚ùå **Removed**: `session_utils.go` - Session utilities
- ‚ùå **Removed**: `connection_manager.go` - Complex connection management
- ‚ùå **Removed**: `connection_pool.go` - Connection pool test command

**Files Updated:**
- **‚úÖ Updated**: `sse_manager.go` - Now uses direct SSE connections
- **‚úÖ Updated**: `http_manager.go` - Now uses direct HTTP connections  
- **‚úÖ Updated**: `stdio_manager.go` - Now uses direct stdio connections
- **‚úÖ Updated**: `client.go` - Updated to support all protocols with direct connections
- **‚úÖ Updated**: `connection.go` - Removed pooling, uses direct clients
- **‚úÖ Updated**: `fileserver-test.go` - Updated to use direct connections
- **‚úÖ Updated**: `connect.go` - Updated connect command
- **‚úÖ Updated**: `aws-tools-test.go` - Updated AWS tools test
- **‚úÖ Updated**: `conversation.go` - Removed PooledClient references
- **‚úÖ Updated**: `client_interface.go` - Updated interface documentation
- **‚úÖ Updated**: `testing.go` - Removed connection pool test command

**Key Benefits Achieved:**
1. **üéØ Simpler Code** - Much easier to understand and maintain
2. **‚ö° Better Performance** - No pooling overhead for simple use cases  
3. **üîÑ Consistent with mcp-go** - Same pattern across libraries
4. **üß™ Easier Testing** - Direct connections are easier to test
5. **üì¶ Smaller Codebase** - Removed ~2000+ lines of complex pooling code

**Test Results:**
- ‚úÖ **12/13 servers connected successfully** 
- ‚úÖ **112 tools discovered** across all protocols
- ‚úÖ **All protocols working**: HTTP, stdio, SSE
- ‚úÖ **No more pooling complexity** - direct connections work perfectly

**Usage Examples:**
```go
// Simple stdio connection
config := MCPServerConfig{
    Command:  "npx",
    Args:     []string{"-y", "@modelcontextprotocol/server-everything"},
    Protocol: ProtocolStdio,
}
client := New(config)
client.Connect(ctx)

// Simple SSE connection  
config := MCPServerConfig{
    URL:      "http://localhost:7000/sse",
    Protocol: ProtocolSSE,
}
client := New(config)
client.Connect(ctx)

// Simple HTTP connection
config := MCPServerConfig{
    URL:      "http://localhost:9090", 
    Protocol: ProtocolHTTP,
}
client := New(config)
client.Connect(ctx)
```

### **Smart Protocol Detection**
- **Auto SSE Detection**: URLs with `/sse` automatically detected as SSE
- **Auto HTTP Detection**: URLs with `http://` or `https://` detected as HTTP
- **Cleaner Config**: Removed explicit `"protocol": "sse"` entries
- **Universal Support**: Works with all 12 servers (SSE, HTTP, stdio)

### **Enhanced MCP Client**
- **Resource Support**: `ListResources()`, `GetResource()`, `PrintResources()`
- **Prompt Support**: `ListPrompts()`, `GetPrompt()`, `PrintPrompts()`
- **Comprehensive Testing**: Tests tools, resources, and prompts for all servers
- **Detailed Reporting**: Shows tool descriptions and server capabilities

### **Prompt & Resource Integration**
- **System Prompt Enhancement**: Prompts and resources automatically included in LLM system prompt
- **Simple Integration**: Single system message approach for universal LLM compatibility
- **Automatic Discovery**: Prompts and resources fetched during agent initialization
- **Context-Aware**: Relevant prompts selected based on user queries

### **Event System Enhancements**
- **Complete Event Coverage**: All agent activities now emit typed events
- **Token Usage Tracking**: Automatic token metrics capture and emission
- **Error Event Handling**: Comprehensive error event emission
- **Fallback Model Events**: Events for throttling and model fallback scenarios
- **Large Tool Output Events**: Events for oversized tool responses

### **External SSE Server Support** ‚úÖ **NEW**
- **Session Management**: Proper session lifecycle for external SSE servers
- **Context Isolation**: Isolated background contexts for SSE tool listing
- **Health Monitoring**: Comprehensive health checks for all external servers
- **Debug Logging**: Detailed logging for session creation and management
- **Protocol Compatibility**: Support for different SSE server implementations

## üéØ **Quick Reference**

### **Essential Commands**
```bash
# Build
cd agent_go && go build -o ../bin/orchestrator .

# Test all servers
../bin/orchestrator test aws-test

# Comprehensive AWS test
../bin/orchestrator test agent --comprehensive-aws --provider bedrock --log-file logs/aws.log

# Connection pooling test
../bin/orchestrator test connection-pool --log-file logs/pool.log

# Complex query tests
./test_single_observer.sh
./test_polling_api.sh

# External SSE server test
./test_external_sse.sh
```

### **Configuration Files**
- `agent_go/configs/mcp_server_actual.json` - 12 server configurations
- `agent_go/.env` - Environment variables (see `agent_go/env.example`)

### **Required Environment Variables**
```bash
# OpenAI
OPENAI_API_KEY=your_openai_key

# AWS Bedrock
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_access_key
AWS_SECRET_ACCESS_KEY=your_secret_key

# Langfuse (optional)
LANGFUSE_PUBLIC_KEY=your_public_key
LANGFUSE_SECRET_KEY=your_secret_key
TRACING_PROVIDER=langfuse|console|noop
```

## ‚úÖ **Key Features Status**
- ‚úÖ **Multi-Server Support**: 12 servers, 112 tools
- ‚úÖ **Multi-Provider LLM**: OpenAI and Bedrock working
- ‚úÖ **Connection Management**: Simplified direct connections with automatic protocol detection
- ‚úÖ **Smart Protocol Detection**: Auto-detects SSE/HTTP/stdio
- ‚úÖ **Langfuse Tracing**: Fully integrated with automatic setup
- ‚úÖ **True Streaming**: Real-time token output
- ‚úÖ **Resource & Prompt Support**: Comprehensive MCP capabilities
- ‚úÖ **Comprehensive Testing**: Autonomous testing framework
- ‚úÖ **SSE Comprehensive Testing**: 7/7 tests passed (100% success rate)
- ‚úÖ **Prompt & Resource Integration**: Automatic system prompt enhancement
- ‚úÖ **Complete Event System**: All agent activities emit typed events
- ‚úÖ **Agent Mode Support**: Simple and ReAct agents with proper end detection
- ‚úÖ **Complex Query Testing**: Comprehensive AWS cost analysis queries
- ‚úÖ **Large Tool Output Handling**: Automatic file saving and processing
- ‚úÖ **External SSE Server Support**: Fixed session management for all external servers
- ‚úÖ **Server Infrastructure**: Stable server startup and API endpoints
- ‚úÖ **Session Management**: Proper session lifecycle for external SSE servers
- ‚úÖ **Virtual Tools**: On-demand prompt and resource access with system prompt previews
- ‚úÖ **Fallback LLM Logging**: Clean, non-streaming debug messages during model fallbacks

The MCP agent is production-ready with simplified connection management, smart protocol detection, comprehensive testing capabilities, full event architecture support, and robust external SSE server session management.


# üöÄ Go LangChain MCP Agent - Architecture & Testing Guide

## üìã **Production Status** ‚úÖ
- **Multi-Server MCP**: 12 servers, 112 tools, all protocols (SSE/HTTP/stdio)
- **Connection Management**: Simplified direct connections with automatic protocol detection
- **Langfuse Tracing**: Complete observability with event architecture
- **Testing Framework**: Autonomous testing with comprehensive validation
- **Event Streaming**: Complete event emission for all agent activities
- **Agent Modes**: Simple and ReAct agents with different conversation end detection
- **External SSE Server Support**: Fixed session management for external SSE servers
- **Virtual Tools**: On-demand prompt and resource access with system prompt previews

## üèóÔ∏è **Core Architecture**

### **Key Components**
- **Multi-Server Support**: Aggregates tools from multiple MCP servers
- **Multi-Provider LLM**: AWS Bedrock (Claude), OpenAI (GPT-4o/4/3.5)
- **Connection Management**: Simplified direct connections with automatic protocol detection
- **Smart Protocol Detection**: Auto-detects SSE/HTTP/stdio from URLs
- **True Streaming**: Real-time LLM streaming (OpenAI full, Bedrock partial)
- **Agent Modes**: Simple and ReAct agents with different reasoning patterns
- **External SSE Session Management**: Proper session handling for external SSE servers
- **Virtual Tools**: On-demand access to prompts and resources with cached data

### **Virtual Tools Architecture** ‚úÖ **NEW**
**Purpose**: Replace direct prompt/resource injection with on-demand access via virtual tools.

**Implementation**:
- **System Prompt Previews**: Shows prompt name + first 10 lines with "... (use 'get_prompt' tool for full content)"
- **Virtual Tools**: `get_prompt` and `get_resource` for on-demand access
- **Cached Data**: Uses locally cached prompts/resources (fast, no network calls)
- **Fallback**: Only makes MCP server calls if data not in cache

**Benefits**:
- **Cleaner System Prompt**: No massive content injection
- **Better Performance**: Uses cached data (fast access)
- **Scalable**: Can handle hundreds of prompts efficiently
- **On-Demand Access**: LLM fetches specific content when needed

**Virtual Tools**:
```go
// Prompt Tools
- 'get_prompt': Fetch full content by server + name

// Resource Tools  
- 'get_resource': Fetch content by server + URI
```

**System Prompt Structure**:
```
üìö AVAILABLE PROMPTS AND KNOWLEDGE RESOURCES:
- aws-msk: # Amazon MSK Debugging Guide
  This guide captures a repeatable **command-line workflow**...
  ... (use 'get_prompt' tool for full content)

üìÅ AVAILABLE RESOURCES:
- config.json (file://config.json): Application configuration
- logs.txt (file://logs.txt): System log files

üîß VIRTUAL TOOLS FOR KNOWLEDGE ACCESS:
- 'get_prompt': Fetch full content of specific prompt
- 'get_resource': Fetch content of specific resource
```

**MCP Protocol Guidance**:
- **Prompts**: Static documentation, guides, best practices, procedures
- **Resources**: Current data, config files, logs, dynamic content

**Files Modified**:
- `agent_go/pkg/mcpagent/virtual_tools.go` - Virtual tool definitions and handlers
- `agent_go/pkg/mcpagent/prompt/prompt.go` - System prompt templates with previews
- `agent_go/pkg/mcpagent/prompt/builder.go` - Preview extraction logic
- `agent_go/pkg/mcpagent/conversation.go` - Virtual tool call handling
- `agent_go/cmd/testing/aws-tools-test.go` - Integrated testing

**Testing Results**:
- ‚úÖ **All MCP servers connected** (13/13)
- ‚úÖ **15 prompts discovered** with previews
- ‚úÖ **Virtual tools working** (get_prompt, get_resource)
- ‚úÖ **System prompt optimized** with previews and guidance
- ‚úÖ **No redundant tools** (removed list_prompts, list_resources)

### **Agent Modes and Conversation End Detection**

#### **Simple Agent**
- **Mode**: `simple` - Direct tool usage without explicit reasoning
- **Conversation End**: Ends immediately when no tool calls are detected
- **Max Turns**: 10 (fewer turns for direct responses)
- **Event**: Emits `conversation_end` when no tools are called

#### **ReAct Agent**
- **Mode**: `react` - Explicit reasoning with step-by-step thinking
- **Conversation End**: Ends when "Final Answer:" pattern is detected
- **Max Turns**: 20 (more turns for reasoning process)
- **Event**: Emits `conversation_end` when completion pattern is found
- **Completion Patterns**: "Final Answer:", "FINAL ANSWER:", "Final answer:", etc.

### **Connection Management System** ‚úÖ **SIMPLIFIED**
**Direct Connection Approach:**
- **Simple Connections**: Direct client connections without pooling complexity
- **Protocol Support**: HTTP, SSE, and stdio with automatic detection
- **Consistent with mcp-go**: Same patterns across libraries
- **Easy Testing**: Direct connections are easier to test and debug

### **Key Files**
- `agent_go/pkg/mcpclient/client.go` - Direct client implementation
- `agent_go/pkg/mcpclient/sse_manager.go` - Direct SSE connections
- `agent_go/pkg/mcpclient/http_manager.go` - Direct HTTP connections
- `agent_go/pkg/mcpclient/stdio_manager.go` - Direct stdio connections
- `agent_go/pkg/mcpagent/connection.go` - Agent integration
- `agent_go/pkg/mcpclient/config.go` - Smart protocol detection
- `agent_go/pkg/mcpagent/conversation.go` - Conversation logic and end detection
- `agent_go/pkg/mcpagent/prompt/react_prompt.go` - ReAct completion patterns

## üîß **Recent Bug Fixes & Improvements**

### **External SSE Server Session Management** ‚úÖ **RESOLVED**
**Issue**: External SSE servers were failing with "Invalid session ID" errors during tool listing.

**Root Cause**: External SSE servers use different session management patterns than internal servers:
- **External servers**: Return `event: endpoint` with session ID, but sessions become invalid during tool listing
- **Internal servers**: Return `event: connected` with status + heartbeats, maintaining valid sessions

**Solution Applied**:
1. **Enhanced Session Management**: Improved session lifecycle handling for external SSE servers
2. **Context Isolation**: Used isolated background contexts for SSE tool listing to prevent cancellation
3. **Connection Pool Improvements**: Enhanced pooled client management for external server protocols
4. **Debug Logging**: Added comprehensive logging for session creation, reuse, and health checks

**Testing Results**:
- ‚úÖ **All External Servers Working**: AWS, GitHub, DB, K8s, Grafana, Sentry, Slack, Profiler, Scripts
- ‚úÖ **Health Checks Passing**: All servers showing healthy status
- ‚úÖ **Tool Discovery Successful**: All servers returning their tools correctly
- ‚úÖ **No Session Errors**: Eliminated "Invalid session ID" and "SSE stream error: context canceled"

### **Server Infrastructure Improvements** ‚úÖ **RESOLVED**
**Issue**: Server startup panics and API endpoint failures.

**Root Cause**: Multiple issues including logger nil pointer dereference and Go build cache problems.

**Solution Applied**:
1. **Centralized Logger Integration**: Modified all files to use `utils.GetLogger()` instead of `logrus.New()`
2. **MCP Go Library API Adaptation**: Adapted to breaking changes in `github.com/mark3labs/mcp-go` v0.35.0
3. **Server Management Improvements**: Enhanced `run_server_with_logging.sh` with background mode support

**Testing Results**:
- ‚úÖ **No Startup Panics**: Server infrastructure is now stable
- ‚úÖ **API Endpoints Working**: `http://localhost:8000/api/query` responding correctly
- ‚úÖ **Background Mode**: Server running with proper PID management
- ‚úÖ **Centralized Logging**: Proper logger integration across all components

### **SSE Connection Cancellation Fixes** ‚úÖ **RESOLVED**
**Issue**: SSE connections were being established but then canceled during tool listing.

**Solution Applied**:
1. **Context Isolation**: Modified `DiscoverAllToolsParallel` to use isolated background context for SSE connections
2. **Enhanced PooledClient**: Updated `PooledClient.Connect` and `PooledClient.ListTools` for SSE context isolation
3. **Debug Logging**: Added comprehensive logging to track context isolation and session management
4. **Session Lifecycle Management**: Improved session creation, reuse, and cleanup for external servers

**Testing Results**:
- ‚úÖ **External SSE Servers**: All working with proper session management
- ‚úÖ **Tool Discovery**: All servers successfully listing their tools
- ‚úÖ **Health Monitoring**: All servers showing healthy status
- ‚úÖ **No Connection Cancellation**: Eliminated SSE stream cancellation issues

## üß™ **Testing Framework**

### **External SSE Server Testing** ‚úÖ **NEW**
```bash
# Test external SSE servers vs internal fileserver
./test_external_sse.sh
```

**Test Results**:
- ‚úÖ **External SSE Servers**: All working (AWS, GitHub, DB, K8s, Grafana, Sentry, Slack, Profiler, Scripts)
- ‚úÖ **Tool Discovery**: All servers returning tools successfully
- ‚úÖ **Health Checks**: All servers showing healthy status
- ‚úÖ **No Session Errors**: Eliminated "Invalid session ID" errors

### **Complex AWS Cost Analysis Test**
```bash
# Test with complex AWS cost analysis query
./test_single_observer.sh
./test_polling_api.sh
```

**Complex Query**: "Analyze costs across all AWS services and provide detailed breakdown. Get cost data for EC2, RDS, S3, Lambda, and other major services. Also check for any unusual spending patterns, identify cost optimization opportunities, and provide recommendations for reducing AWS costs. Include historical data for the last 3 months and forecast for the next month. Generate a comprehensive report with charts and detailed analysis."

**Test Features**:
- **Multiple Tool Calls**: Triggers multiple AWS tool calls for comprehensive analysis
- **Large Tool Outputs**: Tests handling of large tool responses
- **Fallback Scenarios**: May trigger model fallback due to complexity
- **Event Validation**: Verifies all event types are properly emitted
- **Agent Mode Comparison**: Tests both Simple and ReAct agents

### **Lightweight MCP Server Test**
```bash
# Test all servers with automatic protocol detection
../bin/orchestrator test aws-test --config configs/mcp_server_actual.json
```

**Features:**
- **Automatic Protocol Detection**: SSE from `/sse` URLs, HTTP from `http://` URLs
- **Comprehensive Testing**: Tools, resources, prompts, server info
- **Smart Connection Management**: Pooled clients with health monitoring
- **Detailed Reporting**: Success/failure counts with tool descriptions

### **Comprehensive AWS Test**
```bash
# AWS cost report test with actual MCP servers
../bin/orchestrator test agent --comprehensive-aws --provider bedrock --log-file logs/aws_test.log
```

**Test Results:**
- **Status**: ‚úÖ **PASSED** - AWS Bedrock with 4 AWS tools
- **Duration**: ~12 seconds for AWS operations
- **Tools**: aws_cli_query, aws_cloudwatch, aws_cloudwatch_filter_log_events, aws_cloudwatch_multi_metrics
- **Langfuse Tracing**: Complete trace with span hierarchy

### **Comprehensive SSE Test**
```bash
# SSE streaming test with all functionality
../bin/orchestrator test sse --comprehensive --log-file logs/sse_comprehensive_test.log
```

**Test Results:**
- **Status**: ‚úÖ **PASSED** - 7/7 tests passed (100% success rate)
- **Tests**: Basic connection, streaming, connection management, event validation, multi-client, performance, error handling
- **Features**: Real-time streaming, multi-client support, error recovery, performance validation
- **Langfuse Integration**: Automatic tracing with debug mode enabled

### **Autonomous Testing Commands**
```bash
# Basic tests
../bin/orchestrator test agent --simple --provider bedrock --log-file logs/simple.log
../bin/orchestrator test agent --streaming --provider bedrock --log-file logs/streaming.log
../bin/orchestrator test agent --complex --provider bedrock --log-file logs/complex.log

# Connection pooling test
../bin/orchestrator test connection-pool --log-file logs/pool.log

# Langfuse trace retrieval
../bin/orchestrator test langfuse get --log-file logs/traces.log

# SSE comprehensive test
../bin/orchestrator test sse --comprehensive --log-file logs/sse_comprehensive_test.log

# External SSE server test
./test_external_sse.sh
```

## üìä **Event Architecture**

### **Complete Event Types**
- **System Events**: `system_prompt`, `user_message`
- **LLM Events**: `llm_generation_start`, `llm_generation_end`, `token_usage`, `llm_messages`
- **Tool Events**: `tool_call_start`, `tool_call_end`, `tool_call_error` (consolidated)
- **Error Events**: `tool_call_error`, `llm_error`, `throttling_detected`
- **Fallback Events**: `fallback_model_used`, `token_limit_exceeded`
- **Completion Events**: `conversation_end`, `agent_end`

### **Event Architecture Clarifications**

#### **Tool Events Consolidation** ‚úÖ **FIXED**
- **Before**: Redundant `tool_call_end`, `tool_output`, and `tool_response` events
- **After**: Single `tool_call_end` event containing all tool information
- **Benefits**: Reduced event noise, cleaner frontend handling, better performance

#### **LLM Messages Event Purpose** ‚úÖ **CLARIFIED**
- **Purpose**: Shows exactly what messages are sent to the LLM
- **Content**: Conversation context, system prompts, user messages, assistant responses
- **Excludes**: Tool input/output (captured in separate tool events)
- **Design**: Intentional separation for better observability and debugging

#### **Frontend Polling Completion Detection** ‚úÖ **FIXED**
- **Detection**: Monitors for `conversation_end`, `agent_end`, `conversation_error`, `agent_error`
- **Action**: Automatically stops polling when completion detected
- **Benefits**: Prevents unnecessary API calls, improves performance, better UX

### **Agent Mode Event Differences**
- **Simple Agent**: Emits `conversation_end` when no tool calls detected
- **ReAct Agent**: Emits `conversation_end` when "Final Answer:" pattern found
- **Both Modes**: Emit all other events consistently (tool calls, LLM generation, etc.)

### **Large Tool Output Handling**
- **Automatic Detection**: Tool outputs over 1000 characters are saved to files
- **File Processing**: Use fileserver tools to read and analyze large outputs
- **Event Emission**: `large_tool_output_detected` events for oversized responses
- **Integration**: ReAct prompt includes guidance for handling large outputs

## üìä **Langfuse Tracing Integration**

### **Event Architecture**
- **Typed Events**: Proper span hierarchy with structured data
- **Complete Capture**: System prompts, user messages, tool calls, results
- **Token Metrics**: Input/output/total tokens with cost estimates
- **Dashboard Access**: Real-time trace viewing at https://us.cloud.langfuse.com

### **Environment Variables**
```bash
TRACING_PROVIDER=langfuse
LANGFUSE_PUBLIC_KEY=your_public_key
LANGFUSE_SECRET_KEY=your_secret_key
LANGFUSE_DEBUG=true
```

## üîß **Recent Architecture Changes**

### **Connection Management Simplification** ‚úÖ **COMPLETED**
**What Was Accomplished:**
- **‚úÖ COMPLETE**: Removed complex connection pooling system
- **‚úÖ COMPLETE**: Simplified SSE, HTTP, and stdio managers to use direct connections
- **‚úÖ COMPLETE**: Updated all test agents to use the new config file
- **‚úÖ COMPLETE**: Added k8s and profiler tools to disallowed tools lists
- **‚úÖ COMPLETE**: Task creation - SubTask objects created with proper metadata and iteration context
- **‚úÖ COMPLETE**: Connection management simplified to match mcp-go library approach

**Files Simplified/Removed:**
- ‚ùå **Removed**: `pool.go` - Connection pooling logic
- ‚ùå **Removed**: `pool_test.go` - Pooling tests  
- ‚ùå **Removed**: `pooled_client.go` - Pooled client wrapper
- ‚ùå **Removed**: `connection_pool_tools.go` - Pooling tools
- ‚ùå **Removed**: `session.go` - Complex session management
- ‚ùå **Removed**: `session_utils.go` - Session utilities
- ‚ùå **Removed**: `connection_manager.go` - Complex connection management
- ‚ùå **Removed**: `connection_pool.go` - Connection pool test command

**Files Updated:**
- **‚úÖ Updated**: `sse_manager.go` - Now uses direct SSE connections
- **‚úÖ Updated**: `http_manager.go` - Now uses direct HTTP connections  
- **‚úÖ Updated**: `stdio_manager.go` - Now uses direct stdio connections
- **‚úÖ Updated**: `client.go` - Updated to support all protocols with direct connections
- **‚úÖ Updated**: `connection.go` - Removed pooling, uses direct clients
- **‚úÖ Updated**: `fileserver-test.go` - Updated to use direct connections
- **‚úÖ Updated**: `connect.go` - Updated connect command
- **‚úÖ Updated**: `aws-tools-test.go` - Updated AWS tools test
- **‚úÖ Updated**: `conversation.go` - Removed PooledClient references
- **‚úÖ Updated**: `client_interface.go` - Updated interface documentation
- **‚úÖ Updated**: `testing.go` - Removed connection pool test command

**Key Benefits Achieved:**
1. **üéØ Simpler Code** - Much easier to understand and maintain
2. **‚ö° Better Performance** - No pooling overhead for simple use cases  
3. **üîÑ Consistent with mcp-go** - Same pattern across libraries
4. **üß™ Easier Testing** - Direct connections are easier to test
5. **üì¶ Smaller Codebase** - Removed ~2000+ lines of complex pooling code

**Test Results:**
- ‚úÖ **12/13 servers connected successfully** 
- ‚úÖ **112 tools discovered** across all protocols
- ‚úÖ **All protocols working**: HTTP, stdio, SSE
- ‚úÖ **No more pooling complexity** - direct connections work perfectly

**Usage Examples:**
```go
// Simple stdio connection
config := MCPServerConfig{
    Command:  "npx",
    Args:     []string{"-y", "@modelcontextprotocol/server-everything"},
    Protocol: ProtocolStdio,
}
client := New(config)
client.Connect(ctx)

// Simple SSE connection  
config := MCPServerConfig{
    URL:      "http://localhost:7000/sse",
    Protocol: ProtocolSSE,
}
client := New(config)
client.Connect(ctx)

// Simple HTTP connection
config := MCPServerConfig{
    URL:      "http://localhost:9090", 
    Protocol: ProtocolHTTP,
}
client := New(config)
client.Connect(ctx)
```

### **Smart Protocol Detection**
- **Auto SSE Detection**: URLs with `/sse` automatically detected as SSE
- **Auto HTTP Detection**: URLs with `http://` or `https://` detected as HTTP
- **Cleaner Config**: Removed explicit `"protocol": "sse"` entries
- **Universal Support**: Works with all 12 servers (SSE, HTTP, stdio)

### **Enhanced MCP Client**
- **Resource Support**: `ListResources()`, `GetResource()`, `PrintResources()`
- **Prompt Support**: `ListPrompts()`, `GetPrompt()`, `PrintPrompts()`
- **Comprehensive Testing**: Tests tools, resources, and prompts for all servers
- **Detailed Reporting**: Shows tool descriptions and server capabilities

### **Prompt & Resource Integration**
- **System Prompt Enhancement**: Prompts and resources automatically included in LLM system prompt
- **Simple Integration**: Single system message approach for universal LLM compatibility
- **Automatic Discovery**: Prompts and resources fetched during agent initialization
- **Context-Aware**: Relevant prompts selected based on user queries

### **Event System Enhancements**
- **Complete Event Coverage**: All agent activities now emit typed events
- **Token Usage Tracking**: Automatic token metrics capture and emission
- **Error Event Handling**: Comprehensive error event emission
- **Fallback Model Events**: Events for throttling and model fallback scenarios
- **Large Tool Output Events**: Events for oversized tool responses

### **External SSE Server Support** ‚úÖ **NEW**
- **Session Management**: Proper session lifecycle for external SSE servers
- **Context Isolation**: Isolated background contexts for SSE tool listing
- **Health Monitoring**: Comprehensive health checks for all external servers
- **Debug Logging**: Detailed logging for session creation and management
- **Protocol Compatibility**: Support for different SSE server implementations

## üéØ **Quick Reference**

### **Essential Commands**
```bash
# Build
cd agent_go && go build -o ../bin/orchestrator .

# Test all servers
../bin/orchestrator test aws-test

# Comprehensive AWS test
../bin/orchestrator test agent --comprehensive-aws --provider bedrock --log-file logs/aws.log

# Connection pooling test
../bin/orchestrator test connection-pool --log-file logs/pool.log

# Complex query tests
./test_single_observer.sh
./test_polling_api.sh

# External SSE server test
./test_external_sse.sh
```

### **Configuration Files**
- `agent_go/configs/mcp_server_actual.json` - 12 server configurations
- `agent_go/.env` - Environment variables (see `agent_go/env.example`)

### **Required Environment Variables**
```bash
# OpenAI
OPENAI_API_KEY=your_openai_key

# AWS Bedrock
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_access_key
AWS_SECRET_ACCESS_KEY=your_secret_key

# Langfuse (optional)
LANGFUSE_PUBLIC_KEY=your_public_key
LANGFUSE_SECRET_KEY=your_secret_key
TRACING_PROVIDER=langfuse|console|noop
```

## ‚úÖ **Key Features Status**
- ‚úÖ **Multi-Server Support**: 12 servers, 112 tools
- ‚úÖ **Multi-Provider LLM**: OpenAI and Bedrock working
- ‚úÖ **Connection Management**: Simplified direct connections with automatic protocol detection
- ‚úÖ **Smart Protocol Detection**: Auto-detects SSE/HTTP/stdio
- ‚úÖ **Langfuse Tracing**: Fully integrated with automatic setup
- ‚úÖ **True Streaming**: Real-time token output
- ‚úÖ **Resource & Prompt Support**: Comprehensive MCP capabilities
- ‚úÖ **Comprehensive Testing**: Autonomous testing framework
- ‚úÖ **SSE Comprehensive Testing**: 7/7 tests passed (100% success rate)
- ‚úÖ **Prompt & Resource Integration**: Automatic system prompt enhancement
- ‚úÖ **Complete Event System**: All agent activities emit typed events
- ‚úÖ **Agent Mode Support**: Simple and ReAct agents with proper end detection
- ‚úÖ **Complex Query Testing**: Comprehensive AWS cost analysis queries
- ‚úÖ **Large Tool Output Handling**: Automatic file saving and processing
- ‚úÖ **External SSE Server Support**: Fixed session management for all external servers
- ‚úÖ **Server Infrastructure**: Stable server startup and API endpoints
- ‚úÖ **Session Management**: Proper session lifecycle for external SSE servers
- ‚úÖ **Virtual Tools**: On-demand prompt and resource access with system prompt previews

The MCP agent is production-ready with simplified connection management, smart protocol detection, comprehensive testing capabilities, full event architecture support, and robust external SSE server session management.
