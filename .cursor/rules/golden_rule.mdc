---
alwaysApply: false
---
# ðŸš¦ Golden Rule: Autonomous Agent Workflow

Don't create readme's without asking me

- The agent should act **autonomously** for all safe, incremental, and reversible changes (code edits, config tweaks, log improvements, running tests, etc.).
- The agent must **ask for user confirmation** only before:
  - Deleting files or data
  - Making irreversible or potentially dangerous changes
  - When the user's intent is ambiguous or unclear

## MCP Agent Library Requirements

### Library Code Quality
- **Library-First**: Write production-ready library code, not generic test code
- Write reusable, well-documented library functions
- No throwaway code for test cases
- Focus on production-ready implementations
- Use proper interfaces and abstractions

- Don't create readme's with asking me.

- Don't use map[string]interface{}


### Observability (Langfuse)
- **MUST** use event architecture only
- Implement typed events with proper span hierarchy
- Capture system prompts, user messages, tool calls, results
- Use structured event data, not generic logging

### MCP Connection Management
- **MUST** use connection pooling for all MCP servers
- Implement health monitoring and connection reuse
- Support multiple protocols (stdio, HTTP, SSE)
- Handle connection lifecycle properly

Create a TODOLIST, and follow it

1. **Step-by-Step Analysis** â€“ For every user query, perform a thorough analysis first and *explain it back* to the user.
2. **Iterative Execution** â€“ Implement the solution in **small, safe increments**, thinking after each step what the next move should be.
3. **Autonomy** â€“ Default to acting *without further user input*. Only ask if truly ambiguous.
4. **Terminal First** â€“ Use the terminal freely to inspect, lint, run, and test â€“ leverage automation.
7. **No Silent Deletions** â€“ Never delete or overwrite critical files (`.env`, database dumps, production configs, etc.) without **explicit user confirmation**.
8. **.env Protection** â€“ Absolutely **do not** replace or commit `.env` files; read-only access is fine.
9. **Safety Prompts** â€“ Before executing any *destructive* command (`rm`, `drop table`, dangerous scripts) â€“ **pause and ask** the user.
10. **Think > Act** â€“ Maintain a loop of **Think â†’ Tool Call â†’ Observe â†’ Think** until the task is fully solved and validated.
11. **Terminal Autonomy** â€“ I have access to the terminal and will proactively run safe, non-destructive terminal commands as needed, without asking for permission. Only pause for confirmation if a command is potentially destructive (e.g., deleting files, dropping databases, or overwriting configs).
12. **No Step-by-Step User Prompts** â€“ Do not ask the user for confirmation or permission at every step. Only ask if a step is destructive, irreversible, ambiguous, or if user input is truly required.
13. **Automatic Test File Discovery** â€“ Automatically discover and include all files required to run tests, without waiting for user input. Only ask if a file is ambiguous or missing and cannot be inferred.

---
## ðŸš€ Recommended Workflow

```mermaid
flowchart TD
  A[Analyse Query] --> B[Plan Small Step]
  B --> C[Apply Code Edit]
  C --> D[Run Tests / CLI]
  D --> E{All Tests Pass?}
  E -- Yes --> F[Plan Next Step]
  E -- No  --> G[Investigate & Fix]
  F --> B
  G --> B
  B -->|Ambiguous or Destructive?| H[Ask User]
  B -->|Safe, Reversible| C
```

- **If you already have the best solution in mind, proceed with it immediately. take actions step by step, and think after every action and check what you have done **

- **If you don't have a solution, create a detailed plan with proper analysis**
  - If multiple approaches are available, choose the most effective.

- **Act autonomously.**
  - Make informed decisions without requiring further instruction.
  - Use best practices and your judgment to move the task forward efficiently.

- **You have access to the terminal.**
  - Use it to run commands and perform tests if needed.
  - Verify your implementation works as expected.

- **Create or update the TODO list** based on the current situation to outline the necessary steps.

- **Review the codebase thoroughly.**
  - Identify relevant files and sections.
  - Modify or create code as necessary to implement the solution effectively and completely.

- **Update existing documentation only.**
  - Prefer updating `.cursor/rules/` with what was executed. Avoid creating new files, check existing .mdc file.. The existing .mdc file have an auto apply etc section on the top. don't remove that

- **Update existing documentation only.**
  - Prefer updating `.cursor/rules/` with what was executed. Avoid creating new files, check existing .mdc file.. The existing .mdc file have an auto apply etc section on the top. don't remove that
# ðŸš¦ Golden Rule: Autonomous Agent Workflow

- The agent should act **autonomously** for all safe, incremental, and reversible changes (code edits, config tweaks, log improvements, running tests, etc.).
- The agent must **ask for user confirmation** only before:
  - Deleting files or data
  - Making irreversible or potentially dangerous changes
  - When the user's intent is ambiguous or unclear

## MCP Agent Library Requirements

### Library Code Quality
- **Library-First**: Write production-ready library code, not generic test code
- Write reusable, well-documented library functions
- No throwaway code for test cases
- Focus on production-ready implementations
- Use proper interfaces and abstractions

### Observability (Langfuse)
- **MUST** use event architecture only
- Implement typed events with proper span hierarchy
- Capture system prompts, user messages, tool calls, results
- Use structured event data, not generic logging

### MCP Connection Management
- **MUST** use connection pooling for all MCP servers
- Implement health monitoring and connection reuse
- Support multiple protocols (stdio, HTTP, SSE)
- Handle connection lifecycle properly

Create a TODOLIST, and follow it

1. **Step-by-Step Analysis** â€“ For every user query, perform a thorough analysis first and *explain it back* to the user.
2. **Iterative Execution** â€“ Implement the solution in **small, safe increments**, thinking after each step what the next move should be.
3. **Autonomy** â€“ Default to acting *without further user input*. Only ask if truly ambiguous.
4. **Terminal First** â€“ Use the terminal freely to inspect, lint, run, and test â€“ leverage automation.
7. **No Silent Deletions** â€“ Never delete or overwrite critical files (`.env`, database dumps, production configs, etc.) without **explicit user confirmation**.
8. **.env Protection** â€“ Absolutely **do not** replace or commit `.env` files; read-only access is fine.
9. **Safety Prompts** â€“ Before executing any *destructive* command (`rm`, `drop table`, dangerous scripts) â€“ **pause and ask** the user.
10. **Think > Act** â€“ Maintain a loop of **Think â†’ Tool Call â†’ Observe â†’ Think** until the task is fully solved and validated.
11. **Terminal Autonomy** â€“ I have access to the terminal and will proactively run safe, non-destructive terminal commands as needed, without asking for permission. Only pause for confirmation if a command is potentially destructive (e.g., deleting files, dropping databases, or overwriting configs).
12. **No Step-by-Step User Prompts** â€“ Do not ask the user for confirmation or permission at every step. Only ask if a step is destructive, irreversible, ambiguous, or if user input is truly required.
13. **Automatic Test File Discovery** â€“ Automatically discover and include all files required to run tests, without waiting for user input. Only ask if a file is ambiguous or missing and cannot be inferred.

---
## ðŸš€ Recommended Workflow

```mermaid
flowchart TD
  A[Analyse Query] --> B[Plan Small Step]
  B --> C[Apply Code Edit]
  C --> D[Run Tests / CLI]
  D --> E{All Tests Pass?}
  E -- Yes --> F[Plan Next Step]
  E -- No  --> G[Investigate & Fix]
  F --> B
  G --> B
  B -->|Ambiguous or Destructive?| H[Ask User]
  B -->|Safe, Reversible| C
```

- **If you already have the best solution in mind, proceed with it immediately. take actions step by step, and think after every action and check what you have done **

- **If you don't have a solution, create a detailed plan with proper analysis**
  - If multiple approaches are available, choose the most effective.

- **Act autonomously.**
  - Make informed decisions without requiring further instruction.
  - Use best practices and your judgment to move the task forward efficiently.

- **You have access to the terminal.**
  - Use it to run commands and perform tests if needed.
  - Verify your implementation works as expected.

- **Create or update the TODO list** based on the current situation to outline the necessary steps.

- **Review the codebase thoroughly.**
  - Identify relevant files and sections.
  - Modify or create code as necessary to implement the solution effectively and completely.

- **Update existing documentation only.**
  - Prefer updating `.cursor/rules/` with what was executed. Avoid creating new files, check existing .mdc file.. The existing .mdc file have an auto apply etc section on the top. don't remove that

- **Update existing documentation only.**
  - Prefer updating `.cursor/rules/` with what was executed. Avoid creating new files, check existing .mdc file.. The existing .mdc file have an auto apply etc section on the top. don't remove that


- Always use gpt-4.1 its latest and valid openai model