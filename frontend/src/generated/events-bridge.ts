/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface PollingEventSchema {
  type?: string;
  timestamp?: string;
  data?: EventData;
}
export interface EventData {
  tool_call_start?: ToolCallStartEvent;
  tool_call_end?: ToolCallEndEvent;
  tool_call_error?: ToolCallErrorEvent;
  llm_generation_start?: LLMGenerationStartEvent;
  llm_generation_end?: LLMGenerationEndEvent;
  agent_error?: AgentErrorEvent;
  conversation_error?: ConversationErrorEvent;
  llm_generation_error?: LLMGenerationErrorEvent;
  mcp_server_connection?: MCPServerConnectionEvent;
  mcp_server_discovery?: MCPServerDiscoveryEvent;
  mcp_server_selection?: MCPServerSelectionEvent;
  conversation_start?: ConversationStartEvent;
  conversation_end?: ConversationEndEvent;
  conversation_turn?: ConversationTurnEvent;
  system_prompt?: SystemPromptEvent;
  user_message?: UserMessageEvent;
  large_tool_output_detected?: LargeToolOutputDetectedEvent;
  large_tool_output_file_written?: LargeToolOutputFileWrittenEvent;
  fallback_model_used?: FallbackModelUsedEvent;
  throttling_detected?: ThrottlingDetectedEvent;
  token_limit_exceeded?: TokenLimitExceededEvent;
  token_usage?: TokenUsageEvent;
  error_detail?: ErrorDetailEvent;
  max_turns_reached?: MaxTurnsReachedEvent;
  context_cancelled?: ContextCancelledEvent;
  react_reasoning_start?: ReActReasoningStartEvent;
  react_reasoning_step?: ReActReasoningStepEvent;
  react_reasoning_final?: ReActReasoningFinalEvent;
  react_reasoning_end?: ReActReasoningEndEvent;
  tool_output?: ToolOutputEvent;
  tool_response?: ToolResponseEvent;
  model_change?: ModelChangeEvent;
  fallback_attempt?: FallbackAttemptEvent;
  cache_event?: CacheEvent;
  comprehensive_cache_event?: ComprehensiveCacheEvent;
  tool_execution?: ToolExecutionEvent;
  llm_generation_with_retry?: LLMGenerationWithRetryEvent;
  smart_routing_start?: SmartRoutingStartEvent;
  smart_routing_end?: SmartRoutingEndEvent;
  orchestrator_agent_start?: OrchestratorAgentStartEvent;
  orchestrator_agent_end?: OrchestratorAgentEndEvent;
  orchestrator_agent_error?: OrchestratorAgentErrorEvent;
  orchestrator_start?: OrchestratorStartEvent;
  orchestrator_end?: OrchestratorEndEvent;
  orchestrator_error?: OrchestratorErrorEvent;
  request_human_feedback?: RequestHumanFeedbackEvent;
}
export interface ToolCallStartEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  tool_name?: string;
  tool_params?: ToolParams;
  server_name?: string;
}
export interface ToolParams {
  arguments?: string;
}
export interface ToolCallEndEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  tool_name?: string;
  result?: string;
  duration?: number;
  server_name?: string;
}
export interface ToolCallErrorEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  tool_name?: string;
  error?: string;
  server_name?: string;
  duration?: number;
}
export interface LLMGenerationStartEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  model_id?: string;
  temperature?: number;
  tools_count?: number;
  messages_count?: number;
}
export interface LLMGenerationEndEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  content?: string;
  tool_calls?: number;
  duration?: number;
  usage_metrics?: UsageMetrics;
}
export interface UsageMetrics {
  prompt_tokens?: number;
  completion_tokens?: number;
  total_tokens?: number;
}
export interface AgentErrorEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  error?: string;
  turn?: number;
  context?: string;
  duration?: number;
}
export interface ConversationErrorEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  question?: string;
  error?: string;
  turn?: number;
  context?: string;
  duration?: number;
}
export interface LLMGenerationErrorEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  model_id?: string;
  error?: string;
  duration?: number;
}
export interface MCPServerConnectionEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  server_name?: string;
  config_path?: string;
  timeout?: string;
  operation?: string;
  status?: string;
  tools_count?: number;
  connection_time?: number;
  error?: string;
  server_info?: {
    [k: string]: unknown;
  };
}
export interface MCPServerDiscoveryEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  server_name?: string;
  operation?: string;
  total_servers?: number;
  connected_servers?: number;
  failed_servers?: number;
  discovery_time?: number;
  tool_count?: number;
  error?: string;
}
export interface MCPServerSelectionEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  selected_servers?: string[];
  total_servers?: number;
  source?: string;
  query?: string;
}
export interface ConversationStartEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  question?: string;
  system_prompt?: string;
  tools_count?: number;
  servers?: string;
}
export interface ConversationEndEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  question?: string;
  result?: string;
  duration?: number;
  turns?: number;
  status?: string;
  error?: string;
}
export interface ConversationTurnEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  question?: string;
  messages_count?: number;
  has_tool_calls?: boolean;
  tool_calls_count?: number;
  messages?: SerializedMessage[];
}
export interface SerializedMessage {
  role?: string;
  parts?: MessagePart[];
}
export interface MessagePart {
  type?: string;
  content?: unknown;
}
export interface SystemPromptEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  content?: string;
  turn?: number;
}
export interface UserMessageEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  content?: string;
  role?: string;
}
export interface LargeToolOutputDetectedEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  tool_name?: string;
  output_size?: number;
  threshold?: number;
  output_folder?: string;
  server_available?: boolean;
}
export interface LargeToolOutputFileWrittenEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  tool_name?: string;
  file_path?: string;
  output_size?: number;
  file_size?: number;
  output_folder?: string;
  preview?: string;
}
export interface FallbackModelUsedEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  original_model?: string;
  fallback_model?: string;
  provider?: string;
  reason?: string;
  duration?: string;
}
export interface ThrottlingDetectedEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  model_id?: string;
  provider?: string;
  attempt?: number;
  max_attempts?: number;
  duration?: string;
}
export interface TokenLimitExceededEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  model_id?: string;
  provider?: string;
  token_type?: string;
  current_tokens?: number;
  max_tokens?: number;
  duration?: string;
}
export interface TokenUsageEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  operation?: string;
  prompt_tokens?: number;
  completion_tokens?: number;
  total_tokens?: number;
  model_id?: string;
  provider?: string;
  cost_estimate?: number;
  duration?: number;
  context?: string;
}
export interface ErrorDetailEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  error?: string;
  error_type?: string;
  component?: string;
  operation?: string;
  context?: string;
  stack?: string;
  duration?: number;
  recoverable?: boolean;
  retry_count?: number;
}
export interface MaxTurnsReachedEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  max_turns?: number;
  question?: string;
  final_message?: string;
  duration?: string;
  agent_mode?: string;
}
export interface ContextCancelledEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  reason?: string;
  duration?: number;
}
export interface ReActReasoningStartEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  question?: string;
}
export interface ReActReasoningStepEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  step_number?: number;
  thought?: string;
  action?: string;
  observation?: string;
  conclusion?: string;
  step_type?: string;
  content?: string;
}
export interface ReActReasoningFinalEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  final_answer?: string;
  content?: string;
  reasoning?: string;
}
export interface ReActReasoningEndEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  final_answer?: string;
  total_steps?: number;
  reasoning_chain?: string;
}
export interface ToolOutputEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  tool_name?: string;
  output?: string;
  server_name?: string;
  size?: number;
}
export interface ToolResponseEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  tool_name?: string;
  response?: string;
  server_name?: string;
  status?: string;
  error?: string;
}
export interface ModelChangeEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  old_model_id?: string;
  new_model_id?: string;
  reason?: string;
  provider?: string;
  duration?: string;
}
export interface FallbackAttemptEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  attempt_index?: number;
  total_attempts?: number;
  model_id?: string;
  provider?: string;
  phase?: string;
  error?: string;
  success?: boolean;
  duration?: string;
}
export interface CacheEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  operation?: string;
  server_name?: string;
  cache_key?: string;
  config_path?: string;
  tools_count?: number;
  data_size?: number;
  age?: string;
  ttl?: string;
  reason?: string;
  cleanup_type?: string;
  entries_removed?: number;
  entries_total?: number;
  space_freed?: number;
  error?: string;
  error_type?: string;
}
export interface ComprehensiveCacheEvent {
  type?: string;
  server_name?: string;
  config_path?: string;
  timestamp?: string;
  operation?: string;
  cache_used?: boolean;
  fresh_fallback?: boolean;
  servers_count?: number;
  total_tools?: number;
  total_prompts?: number;
  total_resources?: number;
  server_status?: {
    [k: string]: ServerCacheStatus;
  };
  cache_hits?: number;
  cache_misses?: number;
  cache_writes?: number;
  cache_errors?: number;
  connection_time?: string;
  cache_time?: string;
  errors?: string[];
}
export interface ServerCacheStatus {
  server_name?: string;
  status?: string;
  cache_key?: string;
  tools_count?: number;
  prompts_count?: number;
  resources_count?: number;
  age?: string;
  reason?: string;
  error?: string;
}
export interface ToolExecutionEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  tool_name?: string;
  server_name?: string;
  tool_call_id?: string;
  arguments?: {
    [k: string]: unknown;
  };
  result?: string;
  duration?: number;
  success?: boolean;
  timeout?: string;
  error?: string;
  error_type?: string;
  status?: string;
  metadata?: {
    [k: string]: unknown;
  };
}
export interface LLMGenerationWithRetryEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  turn?: number;
  max_retries?: number;
  primary_model?: string;
  current_llm?: string;
  same_provider_fallbacks?: string[];
  cross_provider_fallbacks?: string[];
  provider?: string;
  operation?: string;
  final_error?: string;
  usage?: {
    [k: string]: unknown;
  };
  status?: string;
  metadata?: {
    [k: string]: unknown;
  };
}
export interface SmartRoutingStartEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  total_tools?: number;
  total_servers?: number;
  thresholds?: {
    max_tools?: number;
    max_servers?: number;
  };
  llm_prompt?: string;
  user_query?: string;
  conversation_context?: string;
  llm_model_id?: string;
  llm_provider?: string;
  llm_temperature?: number;
  llm_max_tokens?: number;
}
export interface SmartRoutingEndEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  event_id?: string;
  parent_id?: string;
  is_end_event?: boolean;
  correlation_id?: string;
  total_tools?: number;
  filtered_tools?: number;
  total_servers?: number;
  relevant_servers?: string[];
  routing_reasoning?: string;
  routing_duration?: number;
  success?: boolean;
  error?: string;
  llm_response?: string;
  selected_servers?: string;
  has_appended_prompts?: boolean;
  appended_prompt_count?: number;
  appended_prompt_summary?: string;
  llm_model_id?: string;
  llm_provider?: string;
  llm_temperature?: number;
  llm_max_tokens?: number;
}
export interface OrchestratorAgentStartEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  agent_type?: string;
  agent_name?: string;
  agent_mode?: string;
  objective?: string;
  model_id?: string;
  servers_count?: number;
  max_turns?: number;
  validation_type?: string;
  plan_id?: string;
  step_id?: string;
}
export interface OrchestratorAgentEndEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  agent_type?: string;
  agent_name?: string;
  objective?: string;
  result?: string;
  duration?: number;
  status?: string;
  error?: string;
  turns?: number;
  validation_type?: string;
  plan_id?: string;
  step_id?: string;
  steps_count?: number;
}
export interface OrchestratorAgentErrorEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  agent_type?: string;
  agent_name?: string;
  objective?: string;
  error?: string;
  duration?: number;
  validation_type?: string;
  plan_id?: string;
  step_id?: string;
  step_index?: number;
  iteration?: number;
  context_info?: string;
}
export interface OrchestratorStartEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  objective?: string;
  agents_count?: number;
  servers_count?: number;
  configuration?: string;
}
export interface OrchestratorEndEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  objective?: string;
  result?: string;
  duration?: number;
  status?: string;
  error?: string;
}
export interface OrchestratorErrorEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  context?: string;
  error?: string;
  duration?: number;
}

// Human Verification Events

export interface RequestHumanFeedbackEvent {
  timestamp?: string;
  trace_id?: string;
  span_id?: string;
  objective?: string;
  todo_list_markdown?: string;
  session_id?: string;
  workflow_id?: string;
  request_id?: string;
  // NEW: Dynamic verification fields
  verification_type?: string;  // "planning_verification", "refinement_verification", "report_verification"
  next_phase?: string;         // The phase to transition to after approval
  title?: string;              // Custom title text
  action_label?: string;       // Custom button text
  action_description?: string; // Custom description text
}

