name: Secret Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly to catch any missed secrets
    - cron: '0 0 * * 0'

jobs:
  gitleaks-scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for comprehensive scanning
        fetch-depth: 0
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        # This will use the .gitleaks.toml config file in the repo
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # Use our custom configuration
        config-path: .gitleaks.toml
        # Fail the build if secrets are found
        fail: true
        # Show verbose output
        verbose: true
        # Redact secrets in output
        redact: true
        # Report format
        format: sarif
    
    - name: Rename SARIF file
      run: |
        if [ -f "results.sarif" ]; then
          mv results.sarif gitleaks-report.sarif
          echo "Renamed results.sarif to gitleaks-report.sarif"
        else
          echo "No results.sarif file found"
        fi
    
    - name: Upload Gitleaks scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('gitleaks-report.sarif') != ''
      with:
        sarif_file: gitleaks-report.sarif

  # Additional security scanning with GitHub's native secret scanning
  github-secret-scan:
    name: GitHub Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run GitHub Secret Scanning
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: true
        VALIDATE_SECRETS: true

  # Trivy vulnerability scanner for additional security
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: trivy-results.sarif

  # CodeQL analysis for additional security insights
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'javascript' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
